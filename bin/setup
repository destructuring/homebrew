#!/bin/bash

#/ NAME
#/     setup -- one time setup for xcode
#/
#/ SYNOPSIS
#/     setup homebrew

# figure out the project root under which bin, lib live
shome="$(cd -P -- "$(dirname -- "$0")/.." && pwd -P)"

# load a meat library
source "$shome/bin/_prime" "$@"
require 'profile'

# entry point
function main {
  if [[ "$#" < 1 ]]; then
    logger_fatal "missing component(s)"
    exit 1
  fi

  nm_component="$1"; shift

  case "$nm_component" in 
    homebrew)
      setup_homebrew "$@"
      ;;
  esac
}

function setup_homebrew {
  export HOMEBREW="$FLAGS_install"

  dir_software="${HOMEBREW//\//_}"
  mkdir -p "$shome/vault/homebrew/distfiles"
  mkdir -p "$shome/vault/homebrew/software/$dir_software"
  mkdir -p "$HOMEBREW"
  ln -vnfs "$shome/vault/homebrew/software/$dir_software" "$HOMEBREW/software"

  mkdir -p "$HOMEBREW/bin"
  ln -nfs $shome/bin/brew $HOMEBREW/bin/
  rsync -ia $shome/share $HOMEBREW/
  mkdir -p $HOMEBREW/Library/LinkedKegs
  for nm_lib in $( (set +f; ls -d $shome/Library/*; set -f) | cut -d/ -f3 | grep -v LinkedKegs); do
    ln -nfs $shome/Library/$nm_lib $HOMEBREW/Library/
  done
}

# define command line options:
#   var name, default, description, short option
DEFINE_string 'install' "${HOMEBREW:-$shome/local}" 'homebrew install' 'I'

# parse the command-line
parse_command_line "$@" || exit $?
eval set -- "${FLAGS_ARGV}"

# pass arguments to entry point
main "$@"
